/*p {*/
/*    background-color: blue;*/
/*    color: white;*/
/*}*/

/* using ID selectors */
p#id-selector-1 {
    background-color: red;
    color: white;
}
p#id-selector-2 {
    background-color: yellow;
    color: black;
}

/* using Class selectors */
.class-selector {
    background-color: yellow;
    color: blue;
}

/* refers to .selector-3 as a descendant of .selector-1   */
.selector-1 .selector-3 {
    background-color: red;
    color: white;
}

/* refers to .selector-4 as a direct child of .selector-3 */
/* which is a direct child of .selector-2                 */
.selector-2 > .selector-3 > .selector-4 {
    background-color: yellow;
    color: blue;
}

/* use string / hexadecimals to represent colors */
.fg-color-black { color: black; }
.fg-color-white { color: white; }
.fg-color-blue { color: #7070ff; }
.fg-color-red { color: #ff7070; }
.fg-color-green { color: green; }

.bg-color-yellow {
    background-color: #ffff07;
}
.bg-color-blue {
    background-color: #7070ff;
}
.bg-color-red {
    background-color: #ff7070;
}
.bg-color-green {
    background-color: green;
}

/* Borders */
.border-fat {
    border-width: 20px 30px 20px 30px; }
.border-thin {
    border-width: 4px; }
.border-solid {
    border-style: solid; }
.border-dashed {
    border-style: dashed; }
.border-yellow {
    border-color: #ffff07; }
.border-red {
    border-color: #ff7070; }
.border-blue {
    border-color: #7070ff; }

/* padding: spaces between the internal element within the container
   may also change the size of container */
.padded-top-left {
    padding-top: 50px;
    padding-left: 50px;
}

.padded-bottom-right {
    padding-bottom: 50px;
    padding-right: 50px;
}

.padding-fat {
    padding: 50px;
}

/* margin: spaces between containers */
.margin-bottom {
    margin-bottom: 50px;
}

.margin-right-left {
    margin-left: 50px;
    margin-right: 50px;
}

.margin-all-around {
    margin: 30px;
}

/* configure corners */
.rounded-corners-top {
    border-top-left-radius: 40px;
    border-top-right-radius: 40px;
}

.rounded-corners-bottom {
    border-bottom-left-radius: 40px;
    border-bottom-right-radius: 40px;
}

.rounded-corners-all-around {
    border-radius: 50px;
}


.rounded-corners-inline {
    /* top-left, top-right, bottom-right, bottom-left */
    border-radius: 30px 0px 20px 50px;
}

/* configure width and height */
.dimension-portrait {
    width: 75px;
    height: 100px;
}

.dimension-landscape {
    width: 100px;
    height: 75px;
}

.dimension-square {
    width: 75px;
    height: 75px;
}

/* Relative positions */
.pos-relative-nudge-up-right {
    position: relative;
    bottom: 30px;
    left: 30px;
}

.pos-relative-nudge-down-right {
    position: relative;
    top: 20px;
    left: 20px;
}
/*
set the position as relative, declare the container as an anchor for other elements within it(absolute)

When an element is assigned absolute it is removed from the normal document flow,
and no space is created for the element in the page layout.
It is positioned relative to its closest positioned ancestor if any;
otherwise, it is placed relative to the initial containing block, body.
*/
.pos-relative {
    position: relative;
}

/* Absolute positions */
.pos-absolute-10-10 {
    position: absolute;
    top: 10px;
    left: 10px;
}

.pos-absolute-50-50 {
    position: absolute;
    top: 50px;
    left: 50px;
}

.pos-absolute-120-20 {
    position: absolute;
    top: 20px;
    left: 120px;
}

/* fixed position
   setting the element relative to the window.
*/
.pos-fixed {
    position: fixed;
    right: 0px;
    bottom: 50%;
}

/*
    Elements declared later render on top of elements declared earlier(without using z-index)
    Default value of z-index is auto, which corresponds to 0.
    Increasing z-index can make elements render later, or on top of, others.
 */
.zindex-bring-to-front {
    z-index: 10;
}

/* lay out horizontally */
.float-left {
    float: left;
}

.float-right {
    float: right;
    height: 100px;
}

/*
    The clear property is used to specify which side of floating elements
    are not allowed to float.
*/
.float-done {
    clear: both;
}

/*grid layout*/
.grid-row {
    clear: both;
}

.grid-col-half-page {
    /* percentage width relative to window */
    width: 50%;
    float: left;
}

.grid-col-third-page {
    width: 33%;
    float: left;
}

.grid-col-two-thirds-page {
    width: 67%;
    float: left;
}

.grid-col-left-sidebar {
    width: 20%;
    float: left;
}

.grid-col-main-content {
    width: 60%;
    float: left;
}

.grid-col-right-sidebar {
    width: 20%;
    float: left;
}

/* Rotate 90 degrees clockwise*/
.rotate-paragraph {
    width: 250px;
    height: 250px;
    transform: rotate(90deg);
}

/* Rotate 12 degrees clockwise*/
.rotate-list-clockwise {
    transform: rotate(12deg);
    width: 100px;
    background-color: red;
    color: white;
}

/* Rotate 12 degrees counter clockwise*/
.rotate-list-counter-clockwise {
    transform: rotate(-12deg);
    width: 100px;
    background-color: red;
    color: white;
}

/* set different rotate degree for each child of ul*/
.rotate-list-items li {
    width: 100px;
    text-align: right;
}
.rotate-list-items li:nth-child(1) {
    transform: rotate(-10deg);
    background-color: yellow;
}
.rotate-list-items li:nth-child(2) {
    transform: rotate(2deg);
    background-color: blue;
    color: white;
}
.rotate-list-items li:nth-child(3) {
    transform: rotate(10deg);
    background-color: red;
}

/* Rotate an image */
.rotate-image {
    transform: rotate(-10deg);
}

/* Rotate a table */
.rotate-table {
    position: relative;
    left: 50px;
    /*border: solid 1px black;*/
    transform: rotate(15deg);}
.rotate-table tr:nth-child(1) {
    background-color: black;
    color: white;}
.rotate-table tr:nth-child(n+2) {
    background-color: yellow;}
.rotate-table tr:nth-child(n+5) {
    background-color: blue;
    color: white;}
.rotate-table tr:nth-child(n+8) {
    background-color: red;}
.rotate-table tr:nth-child(n+11) {
    background-color: green;
    color: white;
}

/* color gradients
   up to down
*/
.gradients-linear {
    /* from lawngreen to orange */
    background: linear-gradient(lawngreen, orange);
    width: 200px;
    height: 200px;
}

/* middle to border */
.gradients-radial {
    background: radial-gradient(yellow, red);
    width: 200px;
    height: 200px;
}

/* from top left to right bottom*/
.gradients-positioned {
    background:
            radial-gradient(
                    at top left, blue, red);
    width: 200px;
    height: 200px;
    color: white;
}

/* animation */
.animation-keyframes {
    position: relative;
    top: 0px;
    animation-duration: 7s;
    animation-name: slidein;
    /* iterate times */
    /*animation-iteration-count: infinite;*/
    /* forward then backward */
    animation-direction: alternate;
    width: 200px;
    height: 200px;
    background-color: red;
    color: white;
}

@keyframes slidein {
    from {
        position: relative;
        top: 0px;
        font-size: 100%;
        margin-left: 100%;
        width: 200px;
        height: 200px;
        background-color: yellow;
        color: black;
    }
    50% {
        position: relative;
        top: -200px;
        font-size: 300%;
        margin-left: 25%;
        width: 400px;
        height: 400px;
        background-color: blue;
        color: white;
    }

    to {
        position: relative;
        top: 0px;
        font-size: 100%;
        margin-left: 0%;
        width: 200px;
        height: 200px;
        background-color: red;
        color: white;
    }
}


/* boxes */
.flex-container {
    border-width: 5px;
    border-color: black;
    border-style: solid;
}
.flex-box {
    border: 5px gray solid;
    margin: 10px;
    padding: 10px;
}
.flex-box-1 {
    background-color: yellow;
}
.flex-box-2 {
    background-color: blue;
    color: white;
}
.flex-box-3 {
    background-color: red;
    color: white;
}

/* Aligning flex elements horizontally */
.flex-container-horizontal {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    /* By default flex elements are aligned to the left in their container.*/
    display: flex;
}

.flex-container-center {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: center;
}

.flex-container-end {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: end;
}

.flex-container-space-around {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: space-around;
}

.flex-container-space-between {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: space-between;
}

.flex-container-vertical {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: space-evenly;
    /* align from top */
    align-items: flex-start;
}

.flex-container-vertical-center {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: space-evenly;
    /* align from center */
    align-items: center;
}

/* stretch evenly horizontally and vertically to fill their container */
.flex-container-stretch {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    /*justify-content: space-evenly;*/
    /*align-items: center;*/
}

.flex-container-stretch > .flex-box {
    flex-basis: 100%;
}

/* change styles when screen size changed */
.media-container {
    padding: 10px;
}

/* 0 - 600px */
@media (min-width: 0px)
and (max-width: 600px) {
    .media-container {
        background-color: yellow;
    }
    .media-query {
        background-color: red;
        color: white;
    }
}
/* 600 - 1200px */
@media (min-width: 600px)
and (max-width: 1200px) {
    .media-container {
        background-color: blue;
        color: white;
    }
    .media-query {
        background-color: yellow;
        color: black;
    }
}
/* 1200 - 1800px */
@media (min-width: 1200px)
and (max-width: 1800px) {
    .media-container {
        background-color: red;
        color: white;
    }
    .media-query {
        background-color: blue;
        color: white;
    }
}






